// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package document

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table document.
type Entity struct {
    Id           uint64      `orm:"id,primary"    json:"id"`            // 主键ID             
    CreateTime   *gtime.Time `orm:"create_time"   json:"create_time"`   // 创建时间           
    UpdateTime   *gtime.Time `orm:"update_time"   json:"update_time"`   // 修改时间           
    DeleteTime   *gtime.Time `orm:"delete_time"   json:"delete_time"`   // 删除时间           
    IsDelete     int         `orm:"is_delete"     json:"is_delete"`     // 0 没有删除 1 删除  
    DocumentName string      `orm:"document_name" json:"document_name"` // 标题               
    Markdown     string      `orm:"markdown"      json:"markdown"`      // 内容               
    Release      string      `orm:"release"       json:"release"`       // 发布内容           
    UserId       uint64      `orm:"user_id"       json:"user_id"`       // 作者               
    Abstract     string      `orm:"abstract"      json:"abstract"`      // 摘要               
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}